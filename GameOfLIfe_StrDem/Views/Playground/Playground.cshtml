@{
    ViewData["Title"] = "";

    string[] randomNames = new string[]
    {
        "Лёша",
        "Тёма",
        "Вадик",
        "Вова",
        "Валя",
        "Даня",
        "Деня",
        "Дима",
        "Егор",
        "Кира",
        "Лёня",
        "Макс",
        "Мотя",
        "Никита",
        "Олег",
        "Паша",
        "Петя",
        "Рома",
        "Серёжа",
        "Стас",
};
}
<a target="_blank" href="#">Новая вкладка</a>

<div id="Enter" class="center enter panel">
    <label class="panel-title">Play as Guest</label>
    @* @Context.Request.Cookies["playerName"] *@
    <input class="inputText" type="text" id="playerName" maxlength="12" value="@randomNames[new Random().Next(0,randomNames.Length-1)]" placeholder="Имя игрока" required />
    <input class="commit-button" type="submit" value="Go!" style="margin: 10px 0.5rem 1rem 0.5rem;" onclick="Enter(playerName.value)" />
    <label class="error" id="WrongPlayerName" hidden="hidden" style="margin: 0 0.5rem 1rem 0.5rem;">Указанное имя не подходит</label>
</div>

<div id="Invite" class="invitation panel">
    <label id="InviteLabel" class="panel-title"></label>
    <div class="d-inline-flex" style="justify-content: center;">
        <input class="commit-button" type="submit" value="Принять" style="margin: 10px 0.5rem 1rem 0.5rem;" onclick="AcceptInvite()" />
        <input class="delete-button" type="submit" value="Отклонить" style="margin: 10px 0.5rem 1rem 0.5rem;" onclick="DeclineInvite()" />
    </div>
</div>

<div id="Main" class="center main" hidden="hidden">
    <div style="display: flex; justify-content: space-between;">
        <h5 class="main-title">Игроки OnLine</h5>
        <h5 class="main-title" id="playerNameLabel"></h5>
    </div>
    <div>
        <h5 class="main-title">Правила</h5>
    </div>
    <div class="players">
        <table class="table-striped">
            <thead>
                <tr style="position:sticky;">
                    <th>
                        <label style="margin: 0.5rem;">Имя</label>
                    </th>
                    <th width="25%">
                        <input class="inputText" style="float:right" type="text" id="nameFilter" value="" placeholder="имя..." oninput="FilterPlayerNames(this.value)" />
                    </th>
                </tr>
            </thead>
            <tbody id="PlayerList"></tbody>
        </table>
    </div>

    <div id="GameRules" class="rules">
        <div class="rule-block">
            <p>Используя мышь - рисуй приколы! </p>
            <img src="~/icons/mouse.gif" />
        </div>
        <div class="rule-block">
            <p>На рисование дается - 10 секунд! </p>
            <img src="~/icons/timer.gif" />
        </div>
        <div class="rule-block">
            <p>После рисования - <u>Симуляция</u>! - 30 секунд! </p>
            <img style="image-rendering: pixelated; " src="~/icons/glider.gif" />
        </div>

        <div class="rule-block">
            <p>У тебя больше <u>Живых</u> клеток чем у противника? - Ты победил! </p>
            <img src="~/icons/win.gif" />
        </div>

        <div class="rule-block">
            <a target="_blank" href="https://ru.wikipedia.org/wiki/%D0%98%D0%B3%D1%80%D0%B0_%C2%AB%D0%96%D0%B8%D0%B7%D0%BD%D1%8C%C2%BB#%D0%9F%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D0%B0">Правила выживания! </a>
            <img src="~/icons/finger.gif" />
        </div>

        <div class="rule-block">
            <h4>Успехов и удачи!</h4>
        </div>

    </div>
</div>


<div id="Game" class="center game" hidden="hidden">

    <div><h5 id="MyName" class="game-title"> </h5></div>

    <div><h5 id="OpponentName" class="game-title"> </h5></div>

    <div class="field">
        <div class="grid-background" style="width:350px; height:350px">
            <canvas id="MyField" class="w-100" width="10" height="10"> </canvas>
        </div>
    </div>

    <div class="field">
        <div class="grid-background" style="width:350px; height:350px">
            <canvas id="OpponentField" class="w-100" width="10" height="10">    </canvas>
        </div>
    </div>

    <div id="ReadyRow" class="ready-row">
        <div id="MyReady"> <input class="commit-button" type="button" id="myReadyBtn" value="Готов" onclick="Ready()" /> </div>
        <div id="10sTimer" class="timer"> 10 </div>
        <div id="OpponentReady"> <input class="commit-button" type="button" disabled="disabled" id="opponentReadyBtn" value="Готов" /> </div>
    </div>

    <label class="center overlay-label" id="OverlayLabel" hidden="hidden"></label>

</div>



<script>

    let hubConnection;

    let me;
    let opponent;
    let inviteSender; // Если инвайт пришел НАМ

    // Вход
    function Enter(playerName) {

        let formData = new FormData();
        formData.append("playerName", playerName);

        $.ajax(
            {
                url: "/Playground/Enter",
                data: formData,
                processData: false,
                contentType: false,
                type: "POST",
                success: function (data) {
                    if (data == 'WrongName') {
                        document.getElementById("WrongPlayerName").hidden = false;
                    }
                    if (data == 'OK') {
                        document.getElementById("WrongPlayerName").hidden = true;
                        Start();
                    }
                }
            }
        );

    }

    function Start() {

        // Starting Connection--------------
        hubConnection = new signalR.HubConnectionBuilder()
            .withUrl('/playground')
            .build();

        hubConnection.start().then(function () {
            document.getElementById("Enter").hidden = true;
            document.getElementById("Main").hidden = false;
        });

        // UpdateOnline-------------
        hubConnection.on("UpdatePlayerList", function (players) {
            $('#PlayerList').empty();
            let findMe = players.find(p => p.id == hubConnection.connectionId);
            if (findMe != null) {
                me = findMe;
                document.getElementById('playerNameLabel').textContent = 'Я - ' + me.name;
            }

            $.each(players, function (i, player) {
                if (player.id != hubConnection.connectionId) {
                    if (me != null) {
                        let disablePlayButton = (me.inviting || player.inviting) ? `disabled="disabled"` : '';

                        let row = `<tr>
                                    <td style="max-width:0"> ${player.name} </td>
                                    <td>
                                        <input type="button"
                                               ${disablePlayButton}
                                               class="commit-button"
                                               style="float:right"
                                               value="Играть"
                                               onclick="Invite('${player.id}')"/>
                                    </td>
                              </tr>`;

                        $('#PlayerList').append(row);
                    }
                }

            });
        });

        // Если нам пришел инвайт
        hubConnection.on("Invite", function (sender) {
            inviteSender = sender;
            document.getElementById('InviteLabel').textContent = 'Invite from - ' + sender.name;
            document.getElementById('Invite').classList.add("invitation-visible");
        });

        // Если наш инвайт отклонили
        hubConnection.on("InviteRejected", function () {
            console.log("InviteRejected");
        });

        // Если наш инвайт не прошел
        hubConnection.on("InviteFail", function () {
            console.log("InviteFail");
        });

        // Противник готов
        hubConnection.on("MeReady", function () {
            console.log("MeReady");
            me.ready = true;
        });

        // Противник готов
        hubConnection.on("OpponentReady", function () {
            console.log("OpponentReady");
            document.getElementById('opponentReadyBtn').classList.add('highlight');
        });

        // Отсчет 3с
        hubConnection.on("StartCountDown3", function () {
            Start3sTimer();
        });

        // Отсчет 3с завершен
        hubConnection.on("StopCountDown3", function () {
            document.getElementById('OverlayLabel').hidden = true;
            canEditField = true;
            Start10sTimer();
        });


        hubConnection.on("GameCreated", function (opponent) {
            document.getElementById("Main").hidden = true;
            document.getElementById("Game").hidden = false;
            inviteSender = null;

            document.getElementById('MyName').textContent = me.name;
            document.getElementById('OpponentName').textContent = opponent.name;
        });

        hubConnection.on("GameStoped", function () {
            document.getElementById("Main").hidden = false;
            document.getElementById("Game").hidden = true;
            opponent = null;

            document.getElementById('MyName').textContent = '';
            document.getElementById('OpponentName').textContent = '';

            document.getElementById('myReadyBtn').classList.remove('highlight');
            document.getElementById('myReadyBtn').disabled = false;
            document.getElementById('opponentReadyBtn').classList.remove('highlight');
        });
    }


    // ЗАПРОСЫ----------------
    function FilterPlayerNames(nameFilter) {
        let trimmedAndLowered = nameFilter.toLowerCase().trim().replaceAll('\\', '');

        if (trimmedAndLowered == '') CancelFiltering();
        else if (hubConnection)
            hubConnection.invoke("FilterPlayers", `Name.Tolower().Trim().StartsWith(\"${trimmedAndLowered}\")`); // Используем DynamicLinq
    }

    function CancelFiltering() {
        if (hubConnection)
            hubConnection.invoke("CancelFiltering");
    }

    function Invite(id) {
        if (hubConnection) {
            hubConnection.invoke("Invite", id);
        }
    }

    function AcceptInvite() {
        if (me == null || inviteSender == null) return;
        if (hubConnection) hubConnection.invoke("AcceptInvite", inviteSender.id);
        document.getElementById('Invite').classList.remove("invitation-visible");
    }

    function DeclineInvite() {
        if (hubConnection) {
            hubConnection.invoke("DeclineInvite", inviteSender.id);
        }
        opponent = null;
        document.getElementById('Invite').classList.remove("invitation-visible");
    }

    function Ready() {
        if (hubConnection && !me.ready) {
            hubConnection.invoke("Ready");
            document.getElementById('myReadyBtn').disabled = true;
            document.getElementById('myReadyBtn').classList.add('highlight');
        }
    }

    var timer = 0;
    function StartTimer(seconds, onTick, callback) {
        timer = seconds;
        onTick();

        let t = setInterval(function () {
            timer--;
            onTick();
            if (timer == 0) {
                clearInterval(t);
                callback();
            }
        }, 1000);
    }

    function Start3sTimer() {
        $('#OverlayLabel').text('');
        document.getElementById('OverlayLabel').hidden = false;

        StartTimer(3,
            () => $('#OverlayLabel').text(timer),
            () => {
                $('#OverlayLabel').text('Go!');
            });
    }

    function Start10sTimer() {
        StartTimer(10,
            () => $('#10sTimer').text(timer),
            () => {
                document.getElementById('OverlayLabel').hidden = false;
                $('#OverlayLabel').text('Время вышло!');
                canEditField = false; // делать это при сообщении с хаба

                StartTimer(1, () => { }, () => {
                    document.getElementById('OverlayLabel').hidden = true;
                    StartSimulation(); // Старт!
                });
            }
        );
    }

    function Start30sTimer() {
        StartTimer(30,
            () => $('#10sTimer').text(timer),
            () => {
                document.getElementById('OverlayLabel').hidden = false;
                $('#OverlayLabel').text('Конец симуляции!');
                StartTimer(1, () => { }, () => {
                    $('#OverlayLabel').text('');
                });
            }
        );
    }

    function StartSimulation() {
        Start30sTimer();

    }


    // Рисование начитается отсюда!
    const canvas = document.getElementById("MyField");
    const ctx = canvas.getContext("2d", { willReadFrequently: true });
    ctx.globalAlpha = 0.5;
    ctx.fillStyle = "#123456";

    var canEditField = false;
    let mousePressed = false;
    let operationChanged = true;
    let erase = true;
    let lastCellCoord = { x: null, y: null };


    $('#MyField').mouseleave(function (e) {
        mousePressed = false;
    });

    $('#MyField').mouseup(function (e) {
        mousePressed = false;
    });

    $('#MyField').mousedown(function (e) {
        let c = getPosition(this, e);
        let col = ctx.getImageData(c.x, c.y, 1, 1).data;
        let exists = col[0] != 0 && col[1] != 0 && col[2] != 0;

        mousePressed = true;
        erase = exists;
        operationChanged = true;

        EditField(c);
    });

    // Координаты курсора
    $('#MyField').mousemove(function (e) {
        let c = getPosition(this, e);
        EditField(c);
    });


    function EditField(c) {
        if (canEditField && mousePressed && (operationChanged || (lastCellCoord.x != c.x || lastCellCoord.y != c.y))) {

            let col = ctx.getImageData(c.x, c.y, 1, 1).data;
            let exists = col[0] != 0 && col[1] != 0 && col[2] != 0;

            if (exists && erase) {
                ctx.clearRect(c.x, c.y, 1, 1);
                console.log(c);
            }
            else if (!exists && !erase) {
                ctx.fillRect(c.x, c.y, 1, 1);
                console.log(c);
            }

            lastCellCoord.x = c.x;
            lastCellCoord.y = c.y;
            operationChanged = false;
        }
    }



    function getPosition(elem, event) {
        var target = elem.getBoundingClientRect();
        let x = Math.round((event.clientX - target.left + 17.5) / 35) - 1;
        let y = Math.round((event.clientY - target.top + 17.5) / 35) - 1;
        return { x: x, y: y }
    }




</script>



